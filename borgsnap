#!/bin/bash

# borgsnap - licensed under GPLv3. See the LICENSE file for additional
# details.
#
# Perform a ZFS snapshot and rolling backups using borg.
# On the first of the month, a snapshot is done labeled "month-".
# Otherwise every Sunday, a snapshot is done is done labeled "week-".
# Otherwise every day, a snapshot is done labeled "day-".
# If no month- or week- snapshots already exist, these will be done even
# if it is not the first of the month or Sunday.
#
# Keep up to MONTH_KEEP month backups, WEEK_KEEP week backups, and
# DAY_KEEP day backups.
#
# Usage: borgsnap <command> <config_file> [<args>]
#
# Configuration file documentation:
#
# The configuration file is blindly and dumbly sourced as shell variables,
# hence do not do things such as add whitespace around the "=". There are no
# defaults, all options must be specified. See the example configuration files
# to use as a template.
#
# FS - List file ZFS filesystems to backup.
#   Example: FS="zroot/root zroot/home zdata/data"
#
# LOCAL - If specified (not ""), directory for borg backups. Backups will be
#       stored in subdirectories of pool and filesystem, for example
#       "/backup/borg/zroot/root". This directory must be created prior to
#       running borgsnap.
#   Example: LOCAL="/backup/borg"
#
# LOCAL_READABLE_BY_OTHERS - Make borg repo readable by non-root
#   Example: LOCAL_READABLE_BY_OTHERS=true
#
# SKIPLOCAL - If specified, borgsnap will skip local backup destinations and
#             only issue backup commands to REMOTE destination
#
# RECURSIVE - Create recursive ZFS snapshots for all child filsystems beneath 
#             all filesystems specified in "FS".  All child filesystems will
#             be mounted for borgbackup.
#   Example: RECURSIVE=true
#            or
#            RECURSIVE=false
#
# COMPRESS - Choose compression algo for Borg backups.  Default for borgbackup
#            is lz4, default here is zstd (which applies zstd,3)
#
# REMOTE - If specified (not ""), remote connect string and directory. Only
#          rsync.net has been tested. The remote directory (myhost in the
#          example) will be created if it does not exist.
#   Example: REMOTE=""
#   Example: REMOTE="XXXX@YYYY.rsync.net:myhost"
#
# PASS - Path to a file containing a single line with the passphrase for borg
#        encryption. I generate these with "pwgen 128 1 >/my/path/myhost.key".
#   Example: PASS="/path/to/my/super/secret/myhost.key"
#
# MONTH_KEEP - Number of month backups to keep.
#   Example: MONTH_KEEP=1
#
# WEEK_KEEP - Number of week backups to keep.
#   Example: WEEK_KEEP=4
#
# DAY_KEEP - Number of day backups to keep.
#   Example: DAY_KEEP=7
#
# Note that semantics for lifecycles differ for local ZFS snapshots,
# local borg, and remote borg backups. For ZFS snapshots, we delete all but
# the last N snapshots matching the month-, week-, or day- labels. For borg,
# this uses "borg prune" rather than "borg delete".

set -u

export PATH="/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/sbin"
export BINDDIR="/run/borgsnap"
export BORGPATH="borg1" # "borg1" for rsync.net, otherwise "borg" as appropriate

usage() {
  cat << EOF

usage: $(basename "$0") <command> <config_file> [<args>]

commands:
    run             Run backup lifecycle.
                    usage: $(basename "$0") run <config_file>

    snap            Run backup for specific snapshot.
                    usage: $(basename "$0") snap <config_file> <snapshot-name>

    tidy            Unmount and remove snapshots/local backups for today
                    usage: $(basename "$0") tidy <config_file>
		    
EOF
  exit 1
}

die() {
  echo "$0: $*" >&2
  exit 1
}

[[ $(id -u) == 0 ]] || die "Must be run as root"

dow=$(date +"%w")
dom=$(date +"%d")
date=$(date +"%Y%m%d")

forcemonth=0
forceweek=0

readconfigfile() {
  [[ -r $1 ]] || die "Unable to open $1"

  source "$1"

  BORG_PASSPHRASE=$(< "$PASS")
  export BORG_PASSPHRASE

  BORG_RSH=$RSH
  export BORG_RSH

  [[ -n $BORG_PASSPHRASE ]] || die "Unable to read passphrase from file $PASS"
  if [[ -n $LOCAL ]]; then
    [[ -d $LOCAL ]] || die "Non-existent output directory $LOCAL"
  fi
  scriptpath="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
  echo "scriptpath is $scriptpath/$PRE_SCRIPT"
  if [[ -n $PRE_SCRIPT ]]; then
    [[ -f $PRE_SCRIPT ]] || die "PRE_SCRIPT specified but could not be found: $PRE_SCRIPT"
    [[ -x $PRE_SCRIPT ]] || die "PRE_SCRIPT specified but could not be executed (run command: chmod +x $PRE_SCRIPT)"
  fi

  if [[ -n $POST_SCRIPT ]]; then
    [[ -f $POST_SCRIPT ]] || die "POST_SCRIPT specified but could not be found: $POST_SCRIPT"
    [[ -x $POST_SCRIPT ]] || die "POST_SCRIPT specified but could not be executed (run command: chmod +x $POST_SCRIPT)"
  fi

  if [[ -n $BASEDIR ]]; then
    if [[ -d $BASEDIR ]]; then
      BORG_BASE_DIR=$BASEDIR
      export BORG_BASE_DIR
      echo "Borgbackup basedir set to $BORG_BASE_DIR"
    else
      die "Non-existant BASEDIR $BASEDIR"
    fi
  fi
  if [[ ! -n $CACHEMODE ]]; then
    export CACHEMODE="ctime,size,inode"
    echo "CACHEMODE not configured, defaulting to ctime,size,inode"
  else
    echo "CACHEMODE set to $CACHEMODE"
    export CACHEMODE
  fi
  if [[ ! -n $REMOTE_BORG_COMMAND ]]; then
    export BORGPATH="borg1"
    echo "REMOTE_BORG_COMMAND not configured, defaulting to $BORGPATH (for rsync.net)"
  else
    export BORGPATH=$REMOTE_BORG_COMMAND
    echo "REMOTE_BORG_COMMAND set to $BORGPATH"
  fi


}

findlast() {
  zfs list -t snap -o name | grep "${1}@${2}-" | sort -nr | head -1
}

findall() {
  zfs list -t snap -o name | grep "${1}@${2}-" | sort -nr
}

snapshot() {
  if [ "$RECURSIVE" = true ]; then
    echo "Recursive snapshot ${1}@${2}"
    zfs snapshot -r "${1}@${2}"
  else
    echo "Snapshot ${1}@${2}"
    zfs snapshot "${1}@${2}"
  fi
  # Sometimes it seems to take some time?
  sleep 5
}

destroysnapshot() {
  if [ "$RECURSIVE" = true ]; then
    echo "Recursive snapshot ${1}@${2}"
    zfs destroy -r "${1}@${2}"
  else
    echo "Snapshot ${1}@${2}"
    zfs destroy "${1}@${2}"
  fi
  # Sometimes it seems to take some time?
  sleep 5
}


recursivezfsmount() {
  # $1 - volume, pool/dataset
  # $2 - snapshot label
  # Expects $bind_dir

  for R in `zfs list -Hr -t snapshot -o name $1|grep "@$2$"|sed -e "s@^$1@@" -e "s/@$2$//"`; do
    echo Mounting child filesystem snapshot: "$1$R@$2"
    mkdir -p "$bind_dir$R"
    mount -t zfs "$1$R@$2" "$bind_dir$R"
  done
}

recursivezfsumount() {
  # $1 - volume, pool/dataset
  # $2 - snapshot label
  # Expects $bind_dir

  for R in `zfs list -Hr -t snapshot -o name $1|grep "@$2$"|sed -e "s@^$1@@" -e "s/@$2$//"|tac`; do
	echo Unmounting child filesystem snapshot: "$bind_dir$R"
    umount "$bind_dir$R"
  done
}

dobackup() {
  # $1 - volume, i.e. zroot/home
  # $2 - label, i.e. month-20170602
  # Expects borgdir, rsyncdir, BINDDIR

  echo "------ $(date) ------"
  bind_dir="${BINDDIR}/${1}"
  mkdir -p "$bind_dir"
  mount -t zfs "${1}@${2}" "$bind_dir"
  if [ "$RECURSIVE" = true ]; then
    recursivezfsmount $1 $2
  fi
  BORG_OPTS="--info --stats --compression $COMPRESS --files-cache $CACHEMODE --exclude-if-present .noborg"
  if [[ -n $borgdir && "$LOCALSKIP" != true ]]; then
    echo "Doing local backup of ${1}@${2}"
    borg create $BORG_OPTS "${borgdir}::${2}" "$bind_dir"
    if [ ${LOCAL_READABLE_BY_OTHERS} ]; then
      echo "Set read permissions for others"
      chmod +rx "${borgdir}" -R
    fi
  else
    echo "Skipping local backup"
  fi
  if [[ -n $rsyncdir ]]; then
    echo "Doing remote backup of ${1}@${2}"
    borg create $BORG_OPTS --remote-path=${BORGPATH} "${rsyncdir}::${2}" "$bind_dir"
  fi
  if [ "$RECURSIVE" = true ]; then
    recursivezfsumount $1 $2
  fi

  umount -n "$bind_dir"
}

purgeold() {
  # $1 - volume, i.e. zroot/home
  # $2 - prefix, i.e. month, week, or day
  # $3 - number to keep
  # Expects borgdir, rsyncdir

  echo "------ $(date) ------"
  total=$(wc -l <<<"$(findall "$1" "$2")")

  if [[ $total -le $3 ]]; then
    echo "No old backups to purge"
  else
    delete=$((total-$3))
    echo "Keep: $3, found: $total, will delete $delete"
    for i in $(tail -n $delete <<<"$(findall "$1" "$2")"); do
      echo "Purging old snapshot $i"
      zfs destroy -r "$i"
    done
    BORG_OPTS="--info --stats --keep-daily=$DAY_KEEP --keep-weekly=$WEEK_KEEP --keep-monthly=$MONTH_KEEP"
    if [[ -n $borgdir && "$LOCALSKIP" != true ]]; then
      echo "Pruning local borg"
      borg prune $BORG_OPTS "$borgdir"
    fi
    if [[ -n $rsyncdir ]]; then
      echo "Pruning remote borg"
      borg prune $BORG_OPTS --remote-path=${BORGPATH} "$rsyncdir"
    fi
  fi
}

runBackup() {
  [[ $# == 1 ]] && readconfigfile $1 || usage

  echo "====== $(date) ======"
  for i in $FS; do
    dataset=${i}
    if [[ -n $LOCAL ]]; then
      borgdir="$LOCAL/$dataset"
    else
      borgdir=""
    fi
    if [[ -n $REMOTE ]]; then
      rsyncdir="$REMOTE/$dataset"
    else
      rsyncdir=""
    fi

    echo "Processing $dataset"

    if [[ -n $borgdir && ! -d $borgdir && "$LOCALSKIP" != true ]]; then
      echo "Initializing borg $borgdir"
      mkdir -p "$borgdir"
      borg init --encryption=repokey "$borgdir"
    fi
    if [[ -n $rsyncdir ]]; then
      host=${REMOTE%:*}
      dir=${REMOTE#*:}
      set +e
      ssh "$host" test -d "$dir/$dataset"
      if [[ $? == 1 ]]; then
        set -e
        echo "Initializing remote $rsyncdir"
        ssh "$host" mkdir -p "$dir/$dataset"
        borg init --encryption=repokey --remote-path=${BORGPATH} "$rsyncdir"
      fi
      set -e
    fi

    lastmonth=$(findlast "$i" month)
    if [[ -z $lastmonth ]]; then
      forcemonth=1
    fi

    lastweek=$(findlast "$i" week)
    if [[ -z $lastweek ]]; then
      forceweek=1
    fi

    if [[ -n $PRE_SCRIPT ]]; then
      echo "====== $(date) ======"
      echo "Executing pre-snapshot script: $PRE_SCRIPT"
      if [[ -x $PRE_SCRIPT ]]; then
        $PRE_SCRIPT $i
	sleep 3
      fi
    fi      	    

    if [[ $forcemonth == 1 || $dom -eq 1 ]]; then
      label="monthly-$date"
      snapshot "$i" "$label"
      dobackup "$i" "$label"
      purgeold "$i" month "$MONTH_KEEP"
    elif [[ $forceweek == 1 || $dow -eq 0 ]]; then
      label="weekly-$date"
      snapshot "$i" "$label"
      dobackup "$i" "$label"
      purgeold "$i" week "$WEEK_KEEP"
    else
      label="dayly-$date"
      snapshot "$i" "$label"
      dobackup "$i" "$label"
      purgeold "$i" day "$DAY_KEEP"
    fi

    if [[ -n $POST_SCRIPT ]]; then
      echo "====== $(date) ======"
      echo "Executing post-snapshot script: $POST_SCRIPT"      
      if [[ -x $POST_SCRIPT ]]; then
        $POST_SCRIPT $i
      fi
    fi
  done
  echo "====== $(date) ======"

  echo "Backup Done $(date)"
}

backupSnapshot() {
  [[ $# == 1 ]] && readconfigfile $1 || usage

  for i in $FS; do
    dataset=${i}
    if [[ -n $LOCAL ]]; then
      borgdir="$LOCAL/$dataset"
    else
      borgdir=""
    fi
    if [[ -n $REMOTE ]]; then
      rsyncdir="$REMOTE/$dataset"
    else
      rsyncdir=""
    fi

    echo "Processing $dataset"

    if [[ -n $borgdir && ! -d $borgdir ]]; then
      echo "Initializing borg $borgdir"
      mkdir -p "$borgdir"
      borg init --encryption=repokey "$borgdir"
    fi
    if [[ -n $rsyncdir ]]; then
      host=${REMOTE%:*}
      dir=${REMOTE#*:}
      set +e
      ssh "$host" test -d "$dir/$dataset"
      if [[ $? == 1 ]]; then
        set -e
        echo "Initializing remote $rsyncdir"
        ssh "$host" mkdir -p "$dir/$dataset"
        borg init --encryption=repokey --remote-path=${BORGPATH} "$rsyncdir"
      fi
      set -e
    fi

    label="$2"
    dobackup "$i" "$label"

    echo "Backup Done $dataset@$2"
  done
}

tidybackup() {
  # $1 - volume, i.e. zroot/home
  # $2 - label, i.e. month-20170602
  # Expects borgdir, BINDDIR

  echo "------ $(date) ------"
  bind_dir="${BINDDIR}/${1}"
  if [[ -n $LOCAL ]]; then
    borgdir="$LOCAL/$dataset"
  else
    borgdir=""
  fi
  if [[ -n $REMOTE ]]; then
    rsyncdir="$REMOTE/$dataset"
  else
    rsyncdir=""
  fi
  mkdir -p "$bind_dir"
  BORG_OPTS="--info --stats"
  if [[ -n $borgdir && $LOCALSKIP != true ]]; then
    echo "Deleting local backup of ${1}@${2}"
    borg delete $BORG_OPTS "${borgdir}::${2}" 
    if [ ${LOCAL_READABLE_BY_OTHERS} ]; then
      echo "Set read permissions for others"
      chmod +rx "${borgdir}" -R
    fi
  fi



  if [[ -n $rsyncdir ]]; then
    echo "Deleting remote backup of ${1}@${2}"
    borg delete $BORG_OPTS --remote-path=${BORGPATH} $BORG_OPTS "$rsyncdir::${2}"
  fi
}

tidyUp() {
  [[ $# == 1 ]] && readconfigfile $1 || usage
  echo "====== $(date) ======"
  echo "Unmounting snapshots"
  for f in $(mount | grep ' on /run/borgsnap/' | sed 's/^.* on //' | sed 's/\ type zfs.*//' | tac)
  do
    umount $f
  done
  echo "Removing todays snapshots / backups"
  for i in $FS; do
    dataset=${i}
    lastmonth=$(findlast "$i" month)
    if [[ -z $lastmonth ]]; then
      forcemonth=1
    fi

    lastweek=$(findlast "$i" week)
    if [[ -z $lastweek ]]; then
      forceweek=1
    fi

    if [[ $forcemonth == 1 || $dom -eq 1 ]]; then
      label="month-$date"
      destroysnapshot "$i" "$label"
	  tidybackup "$i" "$label"
    elif [[ $forceweek == 1 || $dow -eq 0 ]]; then
      label="week-$date"
      destroysnapshot "$i" "$label"
	  tidybackup "$i" "$label"
    else
      label="day-$date"
      destroysnapshot "$i" "$label"
	  tidybackup "$i" "$label"
    fi
  done
  echo "Tidy Done $(date)"
}

if [ $# -eq 0 ];then
  usage
  exit
fi

case "$1" in
  run) runBackup "${@:2}";;
  snap) backupSnapshot "${@:2}";;
  tidy) tidyUp "${@:2}";;
  -h) usage;;
  *) echo "$1 is an unknown command!" && usage;;
esac
exit
